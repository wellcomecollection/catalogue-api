steps:
  - command: .buildkite/scripts/run_autoformat.py
    label: "autoformat"
    agents:
      queue: "scala"

    # We increase the priority of this task because it may push a commit
    # and trigger a new build; if so, we want that to happen ASAP.
    priority: 1

  - command: .buildkite/scripts/test_and_build_scala_app.sh display
    label: "display"
    agents:
      queue: "scala"

  - command: .buildkite/scripts/test_and_build_scala_app.sh search_common
    label: "search_common"
    agents:
      queue: "scala"

  - command: .buildkite/scripts/test_and_build_scala_app.sh stacks
    label: "stacks_common"
    agents:
      queue: "scala"

  - command: .buildkite/scripts/test_and_build_scala_app_with_docker_compose.sh search
    label: "Works and images API"
    key: "search-test"
    agents:
      queue: "scala"

    # We increase the priority of this task because it's the longest
    # running task in this pipeline.  Increasing the priority means it
    # will be assigned to the first available instance, rather than waiting
    # for other, faster tasks to be started and new instances created.
    priority: 1

  - command: .buildkite/scripts/test_and_build_scala_app.sh items
    label: "Items API"
    key: "items-test"
    agents:
      queue: "scala"

  - command: .buildkite/scripts/test_and_build_scala_app.sh requests
    label: "Requests API"
    key: "requests-test"
    agents:
      queue: "scala"

  - label: "Concepts API"
    key: "concepts-test"
    plugins:
      - docker-compose#v3.9.0:
          run: "concepts"
          command: ["yarn", "test"]

  - command: .buildkite/scripts/test_and_build_scala_app_with_docker_compose.sh snapshot_generator
    label: "Snapshot generator"
    key: "snapshots-test"
    agents:
      queue: "scala"

  - command: .buildkite/scripts/test_rank.sh
    label: "rank"
    env:
      QUERY_ENV: "candidate"
    plugins:
      - wellcomecollection/aws-assume-role#v0.2.2:
          role: "arn:aws:iam::756629837203:role/catalogue-ci"

  - wait

  - label: trigger stage deploy
    branches: "main"
    trigger: "catalogue-api-deploy-stage"
    async: true
    build:
      message: "${BUILDKITE_MESSAGE}"
      commit: "${BUILDKITE_COMMIT}"
      branch: "${BUILDKITE_BRANCH}"
      env:
        BUILDKITE_PULL_REQUEST: "${BUILDKITE_PULL_REQUEST}"
        BUILDKITE_PULL_REQUEST_BASE_BRANCH: "${BUILDKITE_PULL_REQUEST_BASE_BRANCH}"
        BUILDKITE_PULL_REQUEST_REPO: "${BUILDKITE_PULL_REQUEST_REPO}"
